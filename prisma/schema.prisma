// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id       String @id @default(uuid()) @db.Uuid
  name     String
  email    String @unique
  password String
  status   Int @default(1)
  role     Role
  createdAt DateTime @default(now())
  mustChangePassword Boolean  @default(true)
  
  passwordResets passwordReset[]
  trips trips[]
}

enum Role {
  Administrador
  UsuarioPadrao
}

model passwordReset {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  token     String   @unique
  expiresAt DateTime
  user      Users    @relation(fields: [userId], references: [id])
}


model transports {
  id Int @id @default(autoincrement())
  name String @unique
  calculateKM Boolean
  status Int @default(1)

  trip_transports trip_transports[]
  
}

model expenses {
  id Int @id @default(autoincrement())
  name String @unique
  status Int @default(1)

  trip_expenses trip_expenses[]
}


model parameters_km {
  id Int @id @default(autoincrement())
  value Float
  startDate DateTime
  endDate DateTime
  createdAt DateTime @default(now())

  trips trips[]
}

enum TripStatus {
  EmAndamento
  Finalizada
  Cancelada
}

model trips {
  id Int @id @default(autoincrement())
  userId String @db.Uuid
  destination String
  client String
  cpf_cnpj String @default("")
  reason String
  escort String?
  type String
  advance_value Float
  startDate DateTime
  endDate DateTime
  startKM Int
  endKM Int
  status TripStatus @default(EmAndamento)
  parameters_kmId Int

  
  user Users @relation(fields: [userId], references: [id])
  parameters_km parameters_km @relation(fields: [parameters_kmId], references: [id])

  trip_transports trip_transports[]
  trip_expenses trip_expenses[]

}

model trip_transports {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  tripId Int
  transportId Int

  trip trips @relation(fields: [tripId], references: [id], onDelete: Cascade)
  transport transports @relation(fields: [transportId], references: [id])

  @@unique([tripId, transportId])
}


model trip_expenses {
  id Int @id @default(autoincrement())
  typePayment String
  value Float
  date DateTime 
  taxDocument String
  observation String 
  createdAt DateTime @default(now())
  proof String

  expensesId Int
  tripId Int

  expenses expenses @relation(fields: [expensesId], references: [id], onDelete: Cascade)
  trip trips @relation(fields: [tripId], references: [id], onDelete: Cascade)
}


